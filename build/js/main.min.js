var galleryController=function(){"use strict";return class{constructor(t,e,i,s){this.model=t,this.view=e,this.observer=i,this.utils=s,this.pageConfig={itemsPerPage:10,currentPage:0},this.init()}initListeners(){this.view.DOMElements.userList.addEventListener("click",this.tableLineHandler.bind(this)),this.view.DOMElements.search.addEventListener("keyup",this.searchHandler.bind(this)),this.view.DOMElements.emailDropdown.addEventListener("click",this.sortingHandler.bind(this)),this.view.DOMElements.roleDropdown.addEventListener("click",this.sortingHandler.bind(this)),this.view.DOMElements.nextBtn.addEventListener("click",this.getNextPageHandler.bind(this))}tableLineHandler(t){t.preventDefault();let e=t.target.getAttribute("data-row-id");e?this.openDetail(e):this.view.selectTableLine(t)}openDetail(t){this.model.getUserById(t).then(t=>{this.view.showSingleUser(t)})}searchHandler(t){t.preventDefault();let e=t.target.value;13===t.keyCode&&(0==e.length||e.length>2)&&(this.pageConfig.currentPage=0,this.view.clearList(),this.view.buildUsersList(this.getNextPage(),this.utils.sortingConfig.Find))}sortingHandler(t){t.preventDefault(),this.view.updateButtonText(t),this.applySortingMethod(this.view.getSortingType(t))}getNextPageHandler(t){t&&t.preventDefault(),this.view.buildUsersList(this.getNextPage()),this.isLastPage()}applySortingMethod(t){t&&(this.pageConfig.currentPage=0,this.view.clearList(),this.view.buildUsersList(this.getNextPage(),this.utils.sortingConfig[t]))}getNextPage(){let t=this.pageConfig.itemsPerPage*this.pageConfig.currentPage,e=this.pageConfig.itemsPerPage+t;return this.pageConfig.currentPage++,this.model.usersListData.slice(t,e)}isLastPage(){this.isMaxPage()&&(this.view.hideNextPage(),this.countStats())}isMaxPage(){return this.pageConfig.currentPage*this.pageConfig.itemsPerPage>=this.model.usersListData.length}countStats(){let t=this.model.usersListData.reduce((t,e)=>("Admin"==e.role?t.admins++:t.users++,t),{admins:0,users:0});this.view.showStats(t)}init(){console.log("gallery inited")}}}(),galleryModel=function(){"use strict";return class{constructor(){this.getUrl="http://localhost:3000/usersList",this.usersListData=[]}getUserList(){return fetch(this.getUrl).then(t=>t.json()).then(t=>(console.log("Data is loaded"),this.usersListData=t,t))}getUserById(t){return fetch(this.getUrl+"/"+t).then(t=>t.json()).then(t=>t)}saveUser(t){}updateUser(t){}}}(),galleryView=function(){"use strict";return class{constructor(){this.DOMElements={}}}}(),observer=function(){"use strict";return class{constructor(){this.events={}}subscribeEvent(t,e){this.events[t]=e}callEvent(t,e){this.events[t]&&this.events[t](e)}}}(),loginController=function(){"use strict";return class{constructor(t,e,i){this.model=t,this.view=e,this.utils=i}initListeners(){this.view.DOMElements.logInBtn.addEventListener("click",this.loginHandler.bind(this)),this.view.DOMElements.logOutBtn.addEventListener("click",this.logoutHandler.bind(this))}loginHandler(t){t.preventDefault();let e=this.view.getCredentials();this.model.validate(e)?this.model.login(e).then(t=>{t.loginStatus?(this.view.hideMsg(),this.view.showLogout(),this.utils.navigateTo("gallery")):this.view.showMsg(this.model.getErrorMsg())}):this.view.showMsg(this.model.getErrorMsg())}logoutHandler(){this.view.hideLogout(),this.model.logout(),this.utils.navigateTo("")}init(){console.log("login inited")}}}(),loginModel=function(){"use strict";return class{constructor(){this.loginUrl="http://localhost:3000/login",this.emailPattern=/^\w+@\w+\.\w{2,4}$/i,this.passwordPattern=/^[a-zA-Z0-9]{8,30}$/,this.errorMsg=null,this.errorMsgMap={empty:"Пожалуйста заполните поля логин и пароль",loginError:"Логин введен неверно. Только латинские буквы.",passError:"Пароль введен неверно. Тольк латинские буквы, цифры. Длина не менее 8 символов",missmatch:"Неправильные логин или пароль."}}validate(t){return this.isEmpty(t)&&this.isEmailAssertPattern(t)&&this.isPasswordAssertPattern(t)}login(t){let e={headers:{"Content-type":"application/json; charset=utf-8"},method:"post",body:JSON.stringify(t)};return fetch(this.loginUrl,e).then(t=>t.json()).then(e=>(e.loginStatus?localStorage.setItem("credentials",JSON.stringify(t)):this.setErrorMsg("missmatch"),e))}getErrorMsg(){return this.errorMsg}setErrorMsg(t){return this.errorMsg=this.errorMsgMap[t],!1}isEmpty(t){return t.login&&t.password||this.setErrorMsg("empty")}isEmailAssertPattern(t){return this.emailPattern.test(t.login)||this.setErrorMsg("loginError")}isPasswordAssertPattern(t){return this.passwordPattern.test(t.password)||this.setErrorMsg("passError")}logout(){localStorage.removeItem("credentials")}}}(),loginView=function(){"use strict";return class{constructor(){this.DOMElements={login:document.querySelector("#inputEmail"),password:document.querySelector("#inputPassword"),alert:document.querySelector(".alert"),logInBtn:document.querySelector("#log-in-btn"),logOutBtn:document.querySelector("#log-out-btn")}}showMsg(t){t&&(this.DOMElements.alert.classList.remove("hide"),this.DOMElements.alert.innerHTML=t)}hideMsg(){this.DOMElements.alert.classList.add("hide")}showLogout(){this.DOMElements.logOutBtn.classList.remove("hide")}hideLogout(){this.DOMElements.logOutBtn.classList.add("hide")}getCredentials(){return{login:this.DOMElements.login.value,password:this.DOMElements.password.value}}}}(),mainController=function(){"use strict";return class{constructor(t,e,i){this.model=t,this.view=e,this.utils=i}init(){console.log("main inited")}}}(),mainModel=function(){"use strict";return class{constructor(){}}}(),mainView=function(){"use strict";return class{constructor(){this.DOMElements={}}}}(),profileController=function(){"use strict";return class{constructor(t,e,i){this.model=t,this.view=e,this.utils=i}init(){console.log("profile inited")}}}(),profileModel=function(){"use strict";return class{constructor(){}}}(),profileView=function(){"use strict";return class{constructor(){this.DOMElements={}}}}();!function(){"use strict";class t{constructor(){this.sortingConfig={A:t=>(t.sort((t,e)=>t.email>e.email?1:-1),t),Z:t=>(t.sort((t,e)=>t.email<e.email?1:-1),t),Admin:t=>t.filter(t=>"Admin"==t.role),User:t=>t.filter(t=>"User"==t.role),Find:t=>{let e=new RegExp(event.target.value,"i");return t.filter(t=>e.test(t.name))}}}static showView(t){t.forEach(t=>{t.classList.remove("hide")})}static hideView(t){t.forEach(t=>{t.classList.add("hide")})}static navigateTo(t){window.location.hash="#"+t}static isLoggedIn(){return!0}static activateBtn(t){t.forEach(t=>{t.parentElement.classList.add("active")})}static disactivateBtn(t){t.forEach(t=>{t.parentElement.classList.remove("active")})}}let e=document.querySelector("#main-view"),i=document.querySelector("#profile-view"),s=document.querySelector("#gallery-view"),n=document.querySelector("#mainPageBtn"),r=document.querySelector("#profileBtn"),a=document.querySelector("#galleryBtn"),o={},l={mainPage:{show:()=>{t.showView([e]),t.hideView([i,s]),t.activateBtn([n]),t.disactivateBtn([r,a])},init:()=>{new class{constructor(t,e,i){this.model=t,this.view=e,this.utils=i}init(){console.log("main inited")}}(new class{constructor(){}},new class{constructor(){this.DOMElements={}}},new t).init()}},profile:{show:()=>{t.showView([i]),t.hideView([e,s]),t.activateBtn([r]),t.disactivateBtn([n,a]),console.log("Contacts route is loaded")},init:()=>{}},gallery:{show:()=>{t.showView([s]),t.hideView([e,i]),t.activateBtn([a]),t.disactivateBtn([n,r]),console.log("Main route is loaded")},init:()=>{let e=new class{constructor(){this.events={}}subscribeEvent(t,e){this.events[t]=e}callEvent(t,e){this.events[t]&&this.events[t](e)}};new class{constructor(t,e,i,s){this.model=t,this.view=e,this.observer=i,this.utils=s,this.pageConfig={itemsPerPage:10,currentPage:0},this.init()}initListeners(){this.view.DOMElements.userList.addEventListener("click",this.tableLineHandler.bind(this)),this.view.DOMElements.search.addEventListener("keyup",this.searchHandler.bind(this)),this.view.DOMElements.emailDropdown.addEventListener("click",this.sortingHandler.bind(this)),this.view.DOMElements.roleDropdown.addEventListener("click",this.sortingHandler.bind(this)),this.view.DOMElements.nextBtn.addEventListener("click",this.getNextPageHandler.bind(this))}tableLineHandler(t){t.preventDefault();let e=t.target.getAttribute("data-row-id");e?this.openDetail(e):this.view.selectTableLine(t)}openDetail(t){this.model.getUserById(t).then(t=>{this.view.showSingleUser(t)})}searchHandler(t){t.preventDefault();let e=t.target.value;13===t.keyCode&&(0==e.length||e.length>2)&&(this.pageConfig.currentPage=0,this.view.clearList(),this.view.buildUsersList(this.getNextPage(),this.utils.sortingConfig.Find))}sortingHandler(t){t.preventDefault(),this.view.updateButtonText(t),this.applySortingMethod(this.view.getSortingType(t))}getNextPageHandler(t){t&&t.preventDefault(),this.view.buildUsersList(this.getNextPage()),this.isLastPage()}applySortingMethod(t){t&&(this.pageConfig.currentPage=0,this.view.clearList(),this.view.buildUsersList(this.getNextPage(),this.utils.sortingConfig[t]))}getNextPage(){let t=this.pageConfig.itemsPerPage*this.pageConfig.currentPage,e=this.pageConfig.itemsPerPage+t;return this.pageConfig.currentPage++,this.model.usersListData.slice(t,e)}isLastPage(){this.isMaxPage()&&(this.view.hideNextPage(),this.countStats())}isMaxPage(){return this.pageConfig.currentPage*this.pageConfig.itemsPerPage>=this.model.usersListData.length}countStats(){let t=this.model.usersListData.reduce((t,e)=>("Admin"==e.role?t.admins++:t.users++,t),{admins:0,users:0});this.view.showStats(t)}init(){console.log("gallery inited")}}(new class{constructor(){this.getUrl="http://localhost:3000/usersList",this.usersListData=[]}getUserList(){return fetch(this.getUrl).then(t=>t.json()).then(t=>(console.log("Data is loaded"),this.usersListData=t,t))}getUserById(t){return fetch(this.getUrl+"/"+t).then(t=>t.json()).then(t=>t)}saveUser(t){}updateUser(t){}},new class{constructor(){this.DOMElements={}}},e,new t)}}};function h(){let e=document.location.hash.replace(/^#/,"");e&&!t.isLoggedIn()?t.navigateTo(""):function(t){if(o[t])o[t]();else{let e=l[t];e&&(e.init(),e.show(),o[t]=e.show)}}(e)}window.addEventListener("load",h),window.addEventListener("hashchange",h)}();var router=function(t){"use strict";class e{constructor(){this.sortingConfig={A:t=>(t.sort((t,e)=>t.email>e.email?1:-1),t),Z:t=>(t.sort((t,e)=>t.email<e.email?1:-1),t),Admin:t=>t.filter(t=>"Admin"==t.role),User:t=>t.filter(t=>"User"==t.role),Find:t=>{let e=new RegExp(event.target.value,"i");return t.filter(t=>e.test(t.name))}}}static showView(t){t.forEach(t=>{t.classList.remove("hide")})}static hideView(t){t.forEach(t=>{t.classList.add("hide")})}static navigateTo(t){window.location.hash="#"+t}static isLoggedIn(){return!0}static activateBtn(t){t.forEach(t=>{t.parentElement.classList.add("active")})}static disactivateBtn(t){t.forEach(t=>{t.parentElement.classList.remove("active")})}}let i=document.querySelector("#main-view"),s=document.querySelector("#profile-view"),n=document.querySelector("#gallery-view"),r=document.querySelector("#mainPageBtn"),a=document.querySelector("#profileBtn"),o=document.querySelector("#galleryBtn"),l={},h={mainPage:{show:()=>{e.showView([i]),e.hideView([s,n]),e.activateBtn([r]),e.disactivateBtn([a,o])},init:()=>{new class{constructor(t,e,i){this.model=t,this.view=e,this.utils=i}init(){console.log("main inited")}}(new class{constructor(){}},new class{constructor(){this.DOMElements={}}},new e).init()}},profile:{show:()=>{e.showView([s]),e.hideView([i,n]),e.activateBtn([a]),e.disactivateBtn([r,o]),console.log("Contacts route is loaded")},init:()=>{}},gallery:{show:()=>{e.showView([n]),e.hideView([i,s]),e.activateBtn([o]),e.disactivateBtn([r,a]),console.log("Main route is loaded")},init:()=>{let t=new class{constructor(){this.events={}}subscribeEvent(t,e){this.events[t]=e}callEvent(t,e){this.events[t]&&this.events[t](e)}};new class{constructor(t,e,i,s){this.model=t,this.view=e,this.observer=i,this.utils=s,this.pageConfig={itemsPerPage:10,currentPage:0},this.init()}initListeners(){this.view.DOMElements.userList.addEventListener("click",this.tableLineHandler.bind(this)),this.view.DOMElements.search.addEventListener("keyup",this.searchHandler.bind(this)),this.view.DOMElements.emailDropdown.addEventListener("click",this.sortingHandler.bind(this)),this.view.DOMElements.roleDropdown.addEventListener("click",this.sortingHandler.bind(this)),this.view.DOMElements.nextBtn.addEventListener("click",this.getNextPageHandler.bind(this))}tableLineHandler(t){t.preventDefault();let e=t.target.getAttribute("data-row-id");e?this.openDetail(e):this.view.selectTableLine(t)}openDetail(t){this.model.getUserById(t).then(t=>{this.view.showSingleUser(t)})}searchHandler(t){t.preventDefault();let e=t.target.value;13===t.keyCode&&(0==e.length||e.length>2)&&(this.pageConfig.currentPage=0,this.view.clearList(),this.view.buildUsersList(this.getNextPage(),this.utils.sortingConfig.Find))}sortingHandler(t){t.preventDefault(),this.view.updateButtonText(t),this.applySortingMethod(this.view.getSortingType(t))}getNextPageHandler(t){t&&t.preventDefault(),this.view.buildUsersList(this.getNextPage()),this.isLastPage()}applySortingMethod(t){t&&(this.pageConfig.currentPage=0,this.view.clearList(),this.view.buildUsersList(this.getNextPage(),this.utils.sortingConfig[t]))}getNextPage(){let t=this.pageConfig.itemsPerPage*this.pageConfig.currentPage,e=this.pageConfig.itemsPerPage+t;return this.pageConfig.currentPage++,this.model.usersListData.slice(t,e)}isLastPage(){this.isMaxPage()&&(this.view.hideNextPage(),this.countStats())}isMaxPage(){return this.pageConfig.currentPage*this.pageConfig.itemsPerPage>=this.model.usersListData.length}countStats(){let t=this.model.usersListData.reduce((t,e)=>("Admin"==e.role?t.admins++:t.users++,t),{admins:0,users:0});this.view.showStats(t)}init(){console.log("gallery inited")}}(new class{constructor(){this.getUrl="http://localhost:3000/usersList",this.usersListData=[]}getUserList(){return fetch(this.getUrl).then(t=>t.json()).then(t=>(console.log("Data is loaded"),this.usersListData=t,t))}getUserById(t){return fetch(this.getUrl+"/"+t).then(t=>t.json()).then(t=>t)}saveUser(t){}updateUser(t){}},new class{constructor(){this.DOMElements={}}},t,new e)}}};return t.updateRoute=function(){let t=document.location.hash.replace(/^#/,"");t&&!e.isLoggedIn()?e.navigateTo(""):function(t){if(l[t])l[t]();else{let e=h[t];e&&(e.init(),e.show(),l[t]=e.show)}}(t)},t}({}),utils=function(){"use strict";return class{constructor(){this.sortingConfig={A:t=>(t.sort((t,e)=>t.email>e.email?1:-1),t),Z:t=>(t.sort((t,e)=>t.email<e.email?1:-1),t),Admin:t=>t.filter(t=>"Admin"==t.role),User:t=>t.filter(t=>"User"==t.role),Find:t=>{let e=new RegExp(event.target.value,"i");return t.filter(t=>e.test(t.name))}}}static showView(t){t.forEach(t=>{t.classList.remove("hide")})}static hideView(t){t.forEach(t=>{t.classList.add("hide")})}static navigateTo(t){window.location.hash="#"+t}static isLoggedIn(){return!0}static activateBtn(t){t.forEach(t=>{t.parentElement.classList.add("active")})}static disactivateBtn(t){t.forEach(t=>{t.parentElement.classList.remove("active")})}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

var galleryController=function(){"use strict";return class{constructor(t,e,s,i){this.model=t,this.view=e,this.observer=s,this.utils=i,this.init()}init(){console.log("gallery inited"),this.model.getData().then(t=>{this.view.init(t),console.log("gallery-data: ",t)})}}}(),galleryModel=function(){"use strict";return class{constructor(){this.getUrl="http://localhost:3000/gallery"}getData(){return fetch(this.getUrl).then(t=>t.json()).then(t=>(console.log("Gallery is loaded"),this.usersListData=t,t))}}}(),galleryView=function(){"use strict";return class{constructor(){this.DOMElements={resultBlock:document.querySelector("#result")},this.readyDataForGallery=[],this.visibleData=[]}init(t){this.refreshGallery(t)}refreshGallery(t){this.prepareData(t),this.biuldGallery(this.visibleData)}prepareData(t){this.readyDataForGallery=t.map((t,e)=>({url:this.urlFomat(t.url),name:this.nameFormat(t.name),itemID:t.id})),this.visibleData=[],this.visibleData.push.apply(this.visibleData,this.readyDataForGallery)}biuldGallery(t){this.DOMElements.resultBlock.innerHTML="";for(let e=0;e<t.length;e++)this.DOMElements.resultBlock.innerHTML+=this.createGalleryItem(t[e])}createGalleryItem(t){return`<div class="col-md-4 gallery-card" id = ${t.itemID}>\n\t\t\t\t\t<div class="card mb-4 box-shadow gallery-item" >\n\t\t\t\t\t\t\t<img src="${t.url}" alt="${t.name}" class="card-img-top" data-src="holder.js/100px225?theme=thumb&amp;bg=55595c&amp;fg=eceeef&amp;text=Thumbnail" data-holder-rendered="true" style="height: 225px; width: 100%; display: block;">\n\t\t\t\t\t\t\t<div class="card-body">\n\t\t\t\t\t\t\t\t\t<div class="card-text mb-4">${t.name}</div>\n\t\t\t\t\t\t\t\t\t<div class="btn-group">\n\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-outline-secondary">View</button>\n\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-outline-secondary edit">Edit</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div  name = "delete-img" class = "btn btn-danger"  title = "Удалить данное изображение"> Удалить </div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>`}nameFormat(t){return t?t[0].toUpperCase()+t.substring(1).toLowerCase():"Lohn Doh"}urlFomat(t){return-1===t.indexOf("https://")?`https://${t}`:t}}}(),observer=function(){"use strict";return class{constructor(){this.events={}}subscribeEvent(t,e){this.events[t]=e}callEvent(t,e){this.events[t]&&this.events[t](e)}}}(),loginController=function(){"use strict";return class{constructor(t,e,s){this.loginModel=t,this.loginView=e,this.utils=s,this.init()}init(){this.fillStartPageUserData(),this.bindEvents()}fillStartPageUserData(){1==this.loginModel.getCheckboxStatus()?this.loginModel.getData().then(t=>{this.loginView.DOMElements.checkBoxRemememberMe.checked=!0,this.loginView.DOMElements.email.value=t.login,this.loginView.DOMElements.password.value=t.password}):(this.loginView.DOMElements.checkBoxRemememberMe.checked=!1,this.loginView.DOMElements.email.value="",this.loginView.DOMElements.password.value="")}bindEvents(){this.loginView.DOMElements.submitBtn.addEventListener("click",this.initValidation.bind(this)),this.loginView.DOMElements.exitBtn.addEventListener("click",this.initLogOut.bind(this))}initValidation(t){if(t.preventDefault(),"submitBtn"==t.target.id){this.loginView.hideAlertMsgs();let t=this.loginView.getLogAndPass(),e=this.loginModel.checkFields(t.login,t.password);1==e?this.loginModel.logAndPassValidation(t).then(t=>{t.status?(this.getAndSetCheckboxStatus(),this.utils.navigateTo("mainPage"),this.loginView.showButtons(),this.loginView.hideEnterBtn()):this.loginView.showErrorMsg("1")}):this.loginView.showErrorMsg(e)}}initLogOut(){this.loginModel.logOut(),this.loginView.hideButtons(),this.loginView.showEnterBtn(),this.utils.navigateTo(""),this.getAndSetCheckboxStatus()}getAndSetCheckboxStatus(){1==this.loginView.DOMElements.checkBoxRemememberMe.checked?this.loginModel.setCheckboxStatus("true"):this.loginModel.setCheckboxStatus("false")}}}(),loginModel=function(){"use strict";return class{constructor(){this.urlAdminUser="http://localhost:3000/adminUser",this.urlLogin="http://localhost:3000/login"}getData(){return fetch(this.urlAdminUser).then(t=>t.json()).then(t=>(console.log("Initial data is loaded"),console.log(t),t))}getCheckboxStatus(){return"true"==localStorage.getItem("remember")}setCheckboxStatus(t){localStorage.setItem("remember",t)}checkSession(){return!!localStorage.getItem("credentials")}setUserInfo(t){localStorage.setItem("credentials",JSON.stringify(t))}logOut(){localStorage.removeItem("credentials")}logAndPassValidation(t){let e=this.urlLogin,s={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};return fetch(e,s).then(t=>t.json()).then(e=>(e.status&&this.setUserInfo(t),e))}checkFields(t,e){return t?e?this.checkEmail(t)?!!this.checkPassword(e)||"5":"4":"3":"2"}checkEmail(t){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t)}checkPassword(t){return t.length>=8}saveData(t){console.log("Saving item... "+t.name);let e={name:"Saved iPhone",price:12458,popular:!0,date:1467440203};return new Promise(function(t,s){t(e)})}updateData(t){return console.log("Updating item... "+t),Promise.resolve({name:"Saved Samsung",price:12458,popular:!0,date:1467440203})}setLocalStorGalleryInitStatus(t){localStorage.isGalleryInited=t}changeLocalStorLoggedInStatus(t){localStorage.isUserLoggedIn=t}getLocalStorageGalleryStatus(){return localStorage.isGalleryInited}getIsUserLoggedIn(){return localStorage.isUserLoggedIn}checkUser(t){let e={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};return fetch("http://localhost:3000/login",e).then(t=>t.json())}}}(),loginView=function(){"use strict";return class{constructor(){this.DOMElements={submitBtn:document.querySelector("#submitBtn"),exitBtn:document.querySelector("#exitBtn"),email:document.querySelector("#inputEmail"),password:document.querySelector("#inputPassword"),checkBoxRemememberMe:document.querySelector("#inputRemember"),loginBtn:document.querySelector("#loginBtn"),mainPageBtn:document.querySelector("#mainPageBtn"),profileBtn:document.querySelector("#profileBtn"),galleryBtn:document.querySelector("#galleryBtn"),contactsBtn:document.querySelector("#contactsBtn"),showUserDataBtn:document.querySelector("#showUserDataBtn"),showGalleryBtn:document.querySelector("#showGalleryBtn"),alertMsg:document.querySelector("#alert-message"),notFilledEmailMsg:document.querySelector("#notFilledEmailMsg"),notFilledPassMsg:document.querySelector("#notFilledPassMsg"),wrongEmailMsg:document.querySelector("#wrongEmailMsg"),wrongPassMsg:document.querySelector("#wrongPassMsg")}}getLogAndPass(){return{login:this.DOMElements.email.value,password:this.DOMElements.password.value}}showErrorMsg(t){switch(t){case"1":this.showHide({show:[this.DOMElements.alertMsg]});break;case"2":this.showHide({show:[this.DOMElements.notFilledEmailMsg]});break;case"3":this.showHide({show:[this.DOMElements.notFilledPassMsg]});break;case"4":this.showHide({show:[this.DOMElements.wrongEmailMsg]});break;case"5":this.showHide({show:[this.DOMElements.wrongPassMsg]})}}hideAlertMsgs(){this.showHide({hide:[this.DOMElements.alertMsg,this.DOMElements.notFilledEmailMsg,this.DOMElements.notFilledPassMsg,this.DOMElements.wrongEmailMsg,this.DOMElements.wrongPassMsg]})}showAlertMsg(){this.showHide({show:[this.DOMElements.alertMsg]})}showNotFilledEmailMsg(){this.showHide({show:[this.DOMElements.notFilledEmailMsg]})}showNotFilledPasswordMsg(){this.showHide({show:[this.DOMElements.notFilledPassMsg]})}showBadLoginMsg(){this.showHide({show:[this.DOMElements.wrongEmailMsg]})}showBadPasswordMsg(){this.showHide({show:[this.DOMElements.wrongPassMsg]})}showButtons(){this.showEls([this.DOMElements.mainPageBtn,this.DOMElements.profileBtn,this.DOMElements.galleryBtn,this.DOMElements.contactsBtn,this.DOMElements.exitBtn])}hideButtons(){this.hideEls([this.DOMElements.mainPageBtn,this.DOMElements.profileBtn,this.DOMElements.galleryBtn,this.DOMElements.contactsBtn,this.DOMElements.exitBtn])}hideEnterBtn(){this.hideEls([this.DOMElements.loginBtn])}showEnterBtn(){this.showEls([this.DOMElements.loginBtn])}showHide(t){for(var e in t)t[e=e].forEach(t=>{t.classList.remove("show","hide"),t.classList.add(e)})}showEls(t){t.forEach(t=>{t.classList.remove("hide")})}hideEls(t){t.forEach(t=>{t.classList.add("hide")})}}}(),mainController=function(){"use strict";return class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.init()}init(){console.log("main inited"),this.model.getData().then(t=>{this.view.init(t),console.log("main-data: ",t)})}}}(),mainModel=function(){"use strict";return class{constructor(){this.getUrl="http://localhost:3000/posts"}getData(){return fetch(this.getUrl).then(t=>t.json()).then(t=>(console.log("Gallery is loaded"),this.usersListData=t,t))}}}(),mainView=function(){"use strict";return class{constructor(){this.DOMElements={resultBlock:document.querySelector("#result-main")},this.readyData=[]}init(t){this.refreshPosts(t)}refreshPosts(t){this.readyData=t,this.biuldView(this.readyData)}biuldView(t){this.DOMElements.resultBlock.innerHTML="";for(let e=0;e<t.length;e++)this.DOMElements.resultBlock.innerHTML+=this.createPost(t[e])}createPost(t){let e="";return t.images.forEach(t=>{e+=`<img style="display: inline-block;  margin: 10px; vertical-align: bottom;" data-width="640" data-height="640" data-action="zoom" src="${t}">\n\t\t\t\t`}),`<li class="rv b agz">\n\t\t\t<img class="bos vb yb aff"  src= ${t.url}>\n\t\t\t<div class="rw">\n\t\t\t\t<div class="bpd">\n\t\t\t\t\t<div class="bpb">\n\t\t\t\t\t\t<small class="acx axc">${t.date}</small>\n\t\t\t\t\t\t<h6>${t.name}</h6>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>${t.text}</p>\n\t\t\t\t\t<div class="boy" data-grid="images">${e}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</li>`}}}(),profileController=function(){"use strict";return class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.init()}init(){console.log("profile inited"),this.model.getProfileData().then(t=>{this.view.init(t)})}}}(),profileModel=function(){"use strict";return class{constructor(){this.url="http://localhost:3000/profile"}getProfileData(){return fetch(this.url).then(t=>t.json()).then(t=>(console.log("ProfileData is loaded"),t))}}}(),profileView=function(){"use strict";return class{constructor(){this.DOMElements={firstName:document.querySelector("#firstName"),lastName:document.querySelector("#lastName"),userName:document.querySelector("#username"),email:document.querySelector("#emailProfile"),address:document.querySelector("#addressProfile"),address2:document.querySelector("#address2Profile"),country:document.querySelector("#countryProfile"),state:document.querySelector("#stateProfile"),zip:document.querySelector("#zip")},this.readyData}init(t){this.readyData=t[0],this.buildView(this.readyData)}buildView(t){console.log(this.DOMElements),console.log(t),this.DOMElements.firstName.value=t.name,this.DOMElements.lastName.value=t.lastName,this.DOMElements.userName.value=t.userName,this.DOMElements.email.value=t.email,this.DOMElements.address.value=t.adress,this.DOMElements.address2.value=t.adress2,this.DOMElements.country.value=t.country,this.DOMElements.state.value=t.state,this.DOMElements.zip.value=t.zip}}}();!function(){"use strict";class t{constructor(){this.sortingConfig={A:t=>(t.sort((t,e)=>t.email>e.email?1:-1),t),Z:t=>(t.sort((t,e)=>t.email<e.email?1:-1),t),Admin:t=>t.filter(t=>"Admin"==t.role),User:t=>t.filter(t=>"User"==t.role),Find:t=>{let e=new RegExp(event.target.value,"i");return t.filter(t=>e.test(t.name))}}}static initTemplate(t,e){var s=document.querySelector(`#${e}`).content.cloneNode(!0);t.innerHTML="",t.appendChild(s)}static showView(t){t.forEach(t=>{t.classList.remove("hide")})}static hideView(t){t.forEach(t=>{t.classList.add("hide")})}static navigateTo(t){window.location.hash="#"+t}static isLoggedIn(){return!0}static activateBtn(t){t.forEach(t=>{t.parentElement.classList.add("active")})}static disactivateBtn(t){t.forEach(t=>{t.parentElement.classList.remove("active")})}}document.querySelector("#login-view"),document.querySelector("#main-view"),document.querySelector("#profile-view"),document.querySelector("#gallery-view"),document.querySelector("#mainPageBtn"),document.querySelector("#profileBtn"),document.querySelector("#galleryBtn");const e=document.querySelector("#wrapper");let s={"":()=>{t.initTemplate(e,"login-view"),new class{constructor(t,e,s){this.loginModel=t,this.loginView=e,this.utils=s,this.init()}init(){this.fillStartPageUserData(),this.bindEvents()}fillStartPageUserData(){1==this.loginModel.getCheckboxStatus()?this.loginModel.getData().then(t=>{this.loginView.DOMElements.checkBoxRemememberMe.checked=!0,this.loginView.DOMElements.email.value=t.login,this.loginView.DOMElements.password.value=t.password}):(this.loginView.DOMElements.checkBoxRemememberMe.checked=!1,this.loginView.DOMElements.email.value="",this.loginView.DOMElements.password.value="")}bindEvents(){this.loginView.DOMElements.submitBtn.addEventListener("click",this.initValidation.bind(this)),this.loginView.DOMElements.exitBtn.addEventListener("click",this.initLogOut.bind(this))}initValidation(t){if(t.preventDefault(),"submitBtn"==t.target.id){this.loginView.hideAlertMsgs();let t=this.loginView.getLogAndPass(),e=this.loginModel.checkFields(t.login,t.password);1==e?this.loginModel.logAndPassValidation(t).then(t=>{t.status?(this.getAndSetCheckboxStatus(),this.utils.navigateTo("mainPage"),this.loginView.showButtons(),this.loginView.hideEnterBtn()):this.loginView.showErrorMsg("1")}):this.loginView.showErrorMsg(e)}}initLogOut(){this.loginModel.logOut(),this.loginView.hideButtons(),this.loginView.showEnterBtn(),this.utils.navigateTo(""),this.getAndSetCheckboxStatus()}getAndSetCheckboxStatus(){1==this.loginView.DOMElements.checkBoxRemememberMe.checked?this.loginModel.setCheckboxStatus("true"):this.loginModel.setCheckboxStatus("false")}}(new class{constructor(){this.urlAdminUser="http://localhost:3000/adminUser",this.urlLogin="http://localhost:3000/login"}getData(){return fetch(this.urlAdminUser).then(t=>t.json()).then(t=>(console.log("Initial data is loaded"),console.log(t),t))}getCheckboxStatus(){return"true"==localStorage.getItem("remember")}setCheckboxStatus(t){localStorage.setItem("remember",t)}checkSession(){return!!localStorage.getItem("credentials")}setUserInfo(t){localStorage.setItem("credentials",JSON.stringify(t))}logOut(){localStorage.removeItem("credentials")}logAndPassValidation(t){let e=this.urlLogin,s={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};return fetch(e,s).then(t=>t.json()).then(e=>(e.status&&this.setUserInfo(t),e))}checkFields(t,e){return t?e?this.checkEmail(t)?!!this.checkPassword(e)||"5":"4":"3":"2"}checkEmail(t){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t)}checkPassword(t){return t.length>=8}saveData(t){console.log("Saving item... "+t.name);let e={name:"Saved iPhone",price:12458,popular:!0,date:1467440203};return new Promise(function(t,s){t(e)})}updateData(t){return console.log("Updating item... "+t),Promise.resolve({name:"Saved Samsung",price:12458,popular:!0,date:1467440203})}setLocalStorGalleryInitStatus(t){localStorage.isGalleryInited=t}changeLocalStorLoggedInStatus(t){localStorage.isUserLoggedIn=t}getLocalStorageGalleryStatus(){return localStorage.isGalleryInited}getIsUserLoggedIn(){return localStorage.isUserLoggedIn}checkUser(t){let e={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};return fetch("http://localhost:3000/login",e).then(t=>t.json())}},new class{constructor(){this.DOMElements={submitBtn:document.querySelector("#submitBtn"),exitBtn:document.querySelector("#exitBtn"),email:document.querySelector("#inputEmail"),password:document.querySelector("#inputPassword"),checkBoxRemememberMe:document.querySelector("#inputRemember"),loginBtn:document.querySelector("#loginBtn"),mainPageBtn:document.querySelector("#mainPageBtn"),profileBtn:document.querySelector("#profileBtn"),galleryBtn:document.querySelector("#galleryBtn"),contactsBtn:document.querySelector("#contactsBtn"),showUserDataBtn:document.querySelector("#showUserDataBtn"),showGalleryBtn:document.querySelector("#showGalleryBtn"),alertMsg:document.querySelector("#alert-message"),notFilledEmailMsg:document.querySelector("#notFilledEmailMsg"),notFilledPassMsg:document.querySelector("#notFilledPassMsg"),wrongEmailMsg:document.querySelector("#wrongEmailMsg"),wrongPassMsg:document.querySelector("#wrongPassMsg")}}getLogAndPass(){return{login:this.DOMElements.email.value,password:this.DOMElements.password.value}}showErrorMsg(t){switch(t){case"1":this.showHide({show:[this.DOMElements.alertMsg]});break;case"2":this.showHide({show:[this.DOMElements.notFilledEmailMsg]});break;case"3":this.showHide({show:[this.DOMElements.notFilledPassMsg]});break;case"4":this.showHide({show:[this.DOMElements.wrongEmailMsg]});break;case"5":this.showHide({show:[this.DOMElements.wrongPassMsg]})}}hideAlertMsgs(){this.showHide({hide:[this.DOMElements.alertMsg,this.DOMElements.notFilledEmailMsg,this.DOMElements.notFilledPassMsg,this.DOMElements.wrongEmailMsg,this.DOMElements.wrongPassMsg]})}showAlertMsg(){this.showHide({show:[this.DOMElements.alertMsg]})}showNotFilledEmailMsg(){this.showHide({show:[this.DOMElements.notFilledEmailMsg]})}showNotFilledPasswordMsg(){this.showHide({show:[this.DOMElements.notFilledPassMsg]})}showBadLoginMsg(){this.showHide({show:[this.DOMElements.wrongEmailMsg]})}showBadPasswordMsg(){this.showHide({show:[this.DOMElements.wrongPassMsg]})}showButtons(){this.showEls([this.DOMElements.mainPageBtn,this.DOMElements.profileBtn,this.DOMElements.galleryBtn,this.DOMElements.contactsBtn,this.DOMElements.exitBtn])}hideButtons(){this.hideEls([this.DOMElements.mainPageBtn,this.DOMElements.profileBtn,this.DOMElements.galleryBtn,this.DOMElements.contactsBtn,this.DOMElements.exitBtn])}hideEnterBtn(){this.hideEls([this.DOMElements.loginBtn])}showEnterBtn(){this.showEls([this.DOMElements.loginBtn])}showHide(t){for(var e in t)t[e=e].forEach(t=>{t.classList.remove("show","hide"),t.classList.add(e)})}showEls(t){t.forEach(t=>{t.classList.remove("hide")})}hideEls(t){t.forEach(t=>{t.classList.add("hide")})}},t)},mainPage:()=>{t.initTemplate(e,"mainPage-view"),new class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.init()}init(){console.log("main inited"),this.model.getData().then(t=>{this.view.init(t),console.log("main-data: ",t)})}}(new class{constructor(){this.getUrl="http://localhost:3000/posts"}getData(){return fetch(this.getUrl).then(t=>t.json()).then(t=>(console.log("Gallery is loaded"),this.usersListData=t,t))}},new class{constructor(){this.DOMElements={resultBlock:document.querySelector("#result-main")},this.readyData=[]}init(t){this.refreshPosts(t)}refreshPosts(t){this.readyData=t,this.biuldView(this.readyData)}biuldView(t){this.DOMElements.resultBlock.innerHTML="";for(let e=0;e<t.length;e++)this.DOMElements.resultBlock.innerHTML+=this.createPost(t[e])}createPost(t){let e="";return t.images.forEach(t=>{e+=`<img style="display: inline-block;  margin: 10px; vertical-align: bottom;" data-width="640" data-height="640" data-action="zoom" src="${t}">\n\t\t\t\t`}),`<li class="rv b agz">\n\t\t\t<img class="bos vb yb aff"  src= ${t.url}>\n\t\t\t<div class="rw">\n\t\t\t\t<div class="bpd">\n\t\t\t\t\t<div class="bpb">\n\t\t\t\t\t\t<small class="acx axc">${t.date}</small>\n\t\t\t\t\t\t<h6>${t.name}</h6>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>${t.text}</p>\n\t\t\t\t\t<div class="boy" data-grid="images">${e}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</li>`}},t)},profile:()=>{t.initTemplate(e,"profile-view"),new class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.init()}init(){console.log("profile inited"),this.model.getProfileData().then(t=>{this.view.init(t)})}}(new class{constructor(){this.url="http://localhost:3000/profile"}getProfileData(){return fetch(this.url).then(t=>t.json()).then(t=>(console.log("ProfileData is loaded"),t))}},new class{constructor(){this.DOMElements={firstName:document.querySelector("#firstName"),lastName:document.querySelector("#lastName"),userName:document.querySelector("#username"),email:document.querySelector("#emailProfile"),address:document.querySelector("#addressProfile"),address2:document.querySelector("#address2Profile"),country:document.querySelector("#countryProfile"),state:document.querySelector("#stateProfile"),zip:document.querySelector("#zip")},this.readyData}init(t){this.readyData=t[0],this.buildView(this.readyData)}buildView(t){console.log(this.DOMElements),console.log(t),this.DOMElements.firstName.value=t.name,this.DOMElements.lastName.value=t.lastName,this.DOMElements.userName.value=t.userName,this.DOMElements.email.value=t.email,this.DOMElements.address.value=t.adress,this.DOMElements.address2.value=t.adress2,this.DOMElements.country.value=t.country,this.DOMElements.state.value=t.state,this.DOMElements.zip.value=t.zip}},new t)},gallery:()=>{t.initTemplate(e,"gallery-view");let s=new class{constructor(){this.events={}}subscribeEvent(t,e){this.events[t]=e}callEvent(t,e){this.events[t]&&this.events[t](e)}};new class{constructor(t,e,s,i){this.model=t,this.view=e,this.observer=s,this.utils=i,this.init()}init(){console.log("gallery inited"),this.model.getData().then(t=>{this.view.init(t),console.log("gallery-data: ",t)})}}(new class{constructor(){this.getUrl="http://localhost:3000/gallery"}getData(){return fetch(this.getUrl).then(t=>t.json()).then(t=>(console.log("Gallery is loaded"),this.usersListData=t,t))}},new class{constructor(){this.DOMElements={resultBlock:document.querySelector("#result")},this.readyDataForGallery=[],this.visibleData=[]}init(t){this.refreshGallery(t)}refreshGallery(t){this.prepareData(t),this.biuldGallery(this.visibleData)}prepareData(t){this.readyDataForGallery=t.map((t,e)=>({url:this.urlFomat(t.url),name:this.nameFormat(t.name),itemID:t.id})),this.visibleData=[],this.visibleData.push.apply(this.visibleData,this.readyDataForGallery)}biuldGallery(t){this.DOMElements.resultBlock.innerHTML="";for(let e=0;e<t.length;e++)this.DOMElements.resultBlock.innerHTML+=this.createGalleryItem(t[e])}createGalleryItem(t){return`<div class="col-md-4 gallery-card" id = ${t.itemID}>\n\t\t\t\t\t<div class="card mb-4 box-shadow gallery-item" >\n\t\t\t\t\t\t\t<img src="${t.url}" alt="${t.name}" class="card-img-top" data-src="holder.js/100px225?theme=thumb&amp;bg=55595c&amp;fg=eceeef&amp;text=Thumbnail" data-holder-rendered="true" style="height: 225px; width: 100%; display: block;">\n\t\t\t\t\t\t\t<div class="card-body">\n\t\t\t\t\t\t\t\t\t<div class="card-text mb-4">${t.name}</div>\n\t\t\t\t\t\t\t\t\t<div class="btn-group">\n\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-outline-secondary">View</button>\n\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-outline-secondary edit">Edit</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div  name = "delete-img" class = "btn btn-danger"  title = "Удалить данное изображение"> Удалить </div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>`}nameFormat(t){return t?t[0].toUpperCase()+t.substring(1).toLowerCase():"Lohn Doh"}urlFomat(t){return-1===t.indexOf("https://")?`https://${t}`:t}},s,new t)},contacts:()=>{t.initTemplate(e,"contact-view"),console.log("Contacts route is loaded")}};function i(){let e=document.location.hash.replace(/^#/,"");e&&!t.isLoggedIn()?t.navigateTo(""):function(t){let e=s[t];e&&e()}(e)}window.addEventListener("load",i),window.addEventListener("hashchange",i)}();var router=function(t){"use strict";class e{constructor(){this.sortingConfig={A:t=>(t.sort((t,e)=>t.email>e.email?1:-1),t),Z:t=>(t.sort((t,e)=>t.email<e.email?1:-1),t),Admin:t=>t.filter(t=>"Admin"==t.role),User:t=>t.filter(t=>"User"==t.role),Find:t=>{let e=new RegExp(event.target.value,"i");return t.filter(t=>e.test(t.name))}}}static initTemplate(t,e){var s=document.querySelector(`#${e}`).content.cloneNode(!0);t.innerHTML="",t.appendChild(s)}static showView(t){t.forEach(t=>{t.classList.remove("hide")})}static hideView(t){t.forEach(t=>{t.classList.add("hide")})}static navigateTo(t){window.location.hash="#"+t}static isLoggedIn(){return!0}static activateBtn(t){t.forEach(t=>{t.parentElement.classList.add("active")})}static disactivateBtn(t){t.forEach(t=>{t.parentElement.classList.remove("active")})}}document.querySelector("#login-view"),document.querySelector("#main-view"),document.querySelector("#profile-view"),document.querySelector("#gallery-view"),document.querySelector("#mainPageBtn"),document.querySelector("#profileBtn"),document.querySelector("#galleryBtn");const s=document.querySelector("#wrapper");let i={"":()=>{e.initTemplate(s,"login-view"),new class{constructor(t,e,s){this.loginModel=t,this.loginView=e,this.utils=s,this.init()}init(){this.fillStartPageUserData(),this.bindEvents()}fillStartPageUserData(){1==this.loginModel.getCheckboxStatus()?this.loginModel.getData().then(t=>{this.loginView.DOMElements.checkBoxRemememberMe.checked=!0,this.loginView.DOMElements.email.value=t.login,this.loginView.DOMElements.password.value=t.password}):(this.loginView.DOMElements.checkBoxRemememberMe.checked=!1,this.loginView.DOMElements.email.value="",this.loginView.DOMElements.password.value="")}bindEvents(){this.loginView.DOMElements.submitBtn.addEventListener("click",this.initValidation.bind(this)),this.loginView.DOMElements.exitBtn.addEventListener("click",this.initLogOut.bind(this))}initValidation(t){if(t.preventDefault(),"submitBtn"==t.target.id){this.loginView.hideAlertMsgs();let t=this.loginView.getLogAndPass(),e=this.loginModel.checkFields(t.login,t.password);1==e?this.loginModel.logAndPassValidation(t).then(t=>{t.status?(this.getAndSetCheckboxStatus(),this.utils.navigateTo("mainPage"),this.loginView.showButtons(),this.loginView.hideEnterBtn()):this.loginView.showErrorMsg("1")}):this.loginView.showErrorMsg(e)}}initLogOut(){this.loginModel.logOut(),this.loginView.hideButtons(),this.loginView.showEnterBtn(),this.utils.navigateTo(""),this.getAndSetCheckboxStatus()}getAndSetCheckboxStatus(){1==this.loginView.DOMElements.checkBoxRemememberMe.checked?this.loginModel.setCheckboxStatus("true"):this.loginModel.setCheckboxStatus("false")}}(new class{constructor(){this.urlAdminUser="http://localhost:3000/adminUser",this.urlLogin="http://localhost:3000/login"}getData(){return fetch(this.urlAdminUser).then(t=>t.json()).then(t=>(console.log("Initial data is loaded"),console.log(t),t))}getCheckboxStatus(){return"true"==localStorage.getItem("remember")}setCheckboxStatus(t){localStorage.setItem("remember",t)}checkSession(){return!!localStorage.getItem("credentials")}setUserInfo(t){localStorage.setItem("credentials",JSON.stringify(t))}logOut(){localStorage.removeItem("credentials")}logAndPassValidation(t){let e=this.urlLogin,s={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};return fetch(e,s).then(t=>t.json()).then(e=>(e.status&&this.setUserInfo(t),e))}checkFields(t,e){return t?e?this.checkEmail(t)?!!this.checkPassword(e)||"5":"4":"3":"2"}checkEmail(t){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t)}checkPassword(t){return t.length>=8}saveData(t){console.log("Saving item... "+t.name);let e={name:"Saved iPhone",price:12458,popular:!0,date:1467440203};return new Promise(function(t,s){t(e)})}updateData(t){return console.log("Updating item... "+t),Promise.resolve({name:"Saved Samsung",price:12458,popular:!0,date:1467440203})}setLocalStorGalleryInitStatus(t){localStorage.isGalleryInited=t}changeLocalStorLoggedInStatus(t){localStorage.isUserLoggedIn=t}getLocalStorageGalleryStatus(){return localStorage.isGalleryInited}getIsUserLoggedIn(){return localStorage.isUserLoggedIn}checkUser(t){let e={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};return fetch("http://localhost:3000/login",e).then(t=>t.json())}},new class{constructor(){this.DOMElements={submitBtn:document.querySelector("#submitBtn"),exitBtn:document.querySelector("#exitBtn"),email:document.querySelector("#inputEmail"),password:document.querySelector("#inputPassword"),checkBoxRemememberMe:document.querySelector("#inputRemember"),loginBtn:document.querySelector("#loginBtn"),mainPageBtn:document.querySelector("#mainPageBtn"),profileBtn:document.querySelector("#profileBtn"),galleryBtn:document.querySelector("#galleryBtn"),contactsBtn:document.querySelector("#contactsBtn"),showUserDataBtn:document.querySelector("#showUserDataBtn"),showGalleryBtn:document.querySelector("#showGalleryBtn"),alertMsg:document.querySelector("#alert-message"),notFilledEmailMsg:document.querySelector("#notFilledEmailMsg"),notFilledPassMsg:document.querySelector("#notFilledPassMsg"),wrongEmailMsg:document.querySelector("#wrongEmailMsg"),wrongPassMsg:document.querySelector("#wrongPassMsg")}}getLogAndPass(){return{login:this.DOMElements.email.value,password:this.DOMElements.password.value}}showErrorMsg(t){switch(t){case"1":this.showHide({show:[this.DOMElements.alertMsg]});break;case"2":this.showHide({show:[this.DOMElements.notFilledEmailMsg]});break;case"3":this.showHide({show:[this.DOMElements.notFilledPassMsg]});break;case"4":this.showHide({show:[this.DOMElements.wrongEmailMsg]});break;case"5":this.showHide({show:[this.DOMElements.wrongPassMsg]})}}hideAlertMsgs(){this.showHide({hide:[this.DOMElements.alertMsg,this.DOMElements.notFilledEmailMsg,this.DOMElements.notFilledPassMsg,this.DOMElements.wrongEmailMsg,this.DOMElements.wrongPassMsg]})}showAlertMsg(){this.showHide({show:[this.DOMElements.alertMsg]})}showNotFilledEmailMsg(){this.showHide({show:[this.DOMElements.notFilledEmailMsg]})}showNotFilledPasswordMsg(){this.showHide({show:[this.DOMElements.notFilledPassMsg]})}showBadLoginMsg(){this.showHide({show:[this.DOMElements.wrongEmailMsg]})}showBadPasswordMsg(){this.showHide({show:[this.DOMElements.wrongPassMsg]})}showButtons(){this.showEls([this.DOMElements.mainPageBtn,this.DOMElements.profileBtn,this.DOMElements.galleryBtn,this.DOMElements.contactsBtn,this.DOMElements.exitBtn])}hideButtons(){this.hideEls([this.DOMElements.mainPageBtn,this.DOMElements.profileBtn,this.DOMElements.galleryBtn,this.DOMElements.contactsBtn,this.DOMElements.exitBtn])}hideEnterBtn(){this.hideEls([this.DOMElements.loginBtn])}showEnterBtn(){this.showEls([this.DOMElements.loginBtn])}showHide(t){for(var e in t)t[e=e].forEach(t=>{t.classList.remove("show","hide"),t.classList.add(e)})}showEls(t){t.forEach(t=>{t.classList.remove("hide")})}hideEls(t){t.forEach(t=>{t.classList.add("hide")})}},e)},mainPage:()=>{e.initTemplate(s,"mainPage-view"),new class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.init()}init(){console.log("main inited"),this.model.getData().then(t=>{this.view.init(t),console.log("main-data: ",t)})}}(new class{constructor(){this.getUrl="http://localhost:3000/posts"}getData(){return fetch(this.getUrl).then(t=>t.json()).then(t=>(console.log("Gallery is loaded"),this.usersListData=t,t))}},new class{constructor(){this.DOMElements={resultBlock:document.querySelector("#result-main")},this.readyData=[]}init(t){this.refreshPosts(t)}refreshPosts(t){this.readyData=t,this.biuldView(this.readyData)}biuldView(t){this.DOMElements.resultBlock.innerHTML="";for(let e=0;e<t.length;e++)this.DOMElements.resultBlock.innerHTML+=this.createPost(t[e])}createPost(t){let e="";return t.images.forEach(t=>{e+=`<img style="display: inline-block;  margin: 10px; vertical-align: bottom;" data-width="640" data-height="640" data-action="zoom" src="${t}">\n\t\t\t\t`}),`<li class="rv b agz">\n\t\t\t<img class="bos vb yb aff"  src= ${t.url}>\n\t\t\t<div class="rw">\n\t\t\t\t<div class="bpd">\n\t\t\t\t\t<div class="bpb">\n\t\t\t\t\t\t<small class="acx axc">${t.date}</small>\n\t\t\t\t\t\t<h6>${t.name}</h6>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>${t.text}</p>\n\t\t\t\t\t<div class="boy" data-grid="images">${e}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</li>`}},e)},profile:()=>{e.initTemplate(s,"profile-view"),new class{constructor(t,e,s){this.model=t,this.view=e,this.utils=s,this.init()}init(){console.log("profile inited"),this.model.getProfileData().then(t=>{this.view.init(t)})}}(new class{constructor(){this.url="http://localhost:3000/profile"}getProfileData(){return fetch(this.url).then(t=>t.json()).then(t=>(console.log("ProfileData is loaded"),t))}},new class{constructor(){this.DOMElements={firstName:document.querySelector("#firstName"),lastName:document.querySelector("#lastName"),userName:document.querySelector("#username"),email:document.querySelector("#emailProfile"),address:document.querySelector("#addressProfile"),address2:document.querySelector("#address2Profile"),country:document.querySelector("#countryProfile"),state:document.querySelector("#stateProfile"),zip:document.querySelector("#zip")},this.readyData}init(t){this.readyData=t[0],this.buildView(this.readyData)}buildView(t){console.log(this.DOMElements),console.log(t),this.DOMElements.firstName.value=t.name,this.DOMElements.lastName.value=t.lastName,this.DOMElements.userName.value=t.userName,this.DOMElements.email.value=t.email,this.DOMElements.address.value=t.adress,this.DOMElements.address2.value=t.adress2,this.DOMElements.country.value=t.country,this.DOMElements.state.value=t.state,this.DOMElements.zip.value=t.zip}},new e)},gallery:()=>{e.initTemplate(s,"gallery-view");let t=new class{constructor(){this.events={}}subscribeEvent(t,e){this.events[t]=e}callEvent(t,e){this.events[t]&&this.events[t](e)}};new class{constructor(t,e,s,i){this.model=t,this.view=e,this.observer=s,this.utils=i,this.init()}init(){console.log("gallery inited"),this.model.getData().then(t=>{this.view.init(t),console.log("gallery-data: ",t)})}}(new class{constructor(){this.getUrl="http://localhost:3000/gallery"}getData(){return fetch(this.getUrl).then(t=>t.json()).then(t=>(console.log("Gallery is loaded"),this.usersListData=t,t))}},new class{constructor(){this.DOMElements={resultBlock:document.querySelector("#result")},this.readyDataForGallery=[],this.visibleData=[]}init(t){this.refreshGallery(t)}refreshGallery(t){this.prepareData(t),this.biuldGallery(this.visibleData)}prepareData(t){this.readyDataForGallery=t.map((t,e)=>({url:this.urlFomat(t.url),name:this.nameFormat(t.name),itemID:t.id})),this.visibleData=[],this.visibleData.push.apply(this.visibleData,this.readyDataForGallery)}biuldGallery(t){this.DOMElements.resultBlock.innerHTML="";for(let e=0;e<t.length;e++)this.DOMElements.resultBlock.innerHTML+=this.createGalleryItem(t[e])}createGalleryItem(t){return`<div class="col-md-4 gallery-card" id = ${t.itemID}>\n\t\t\t\t\t<div class="card mb-4 box-shadow gallery-item" >\n\t\t\t\t\t\t\t<img src="${t.url}" alt="${t.name}" class="card-img-top" data-src="holder.js/100px225?theme=thumb&amp;bg=55595c&amp;fg=eceeef&amp;text=Thumbnail" data-holder-rendered="true" style="height: 225px; width: 100%; display: block;">\n\t\t\t\t\t\t\t<div class="card-body">\n\t\t\t\t\t\t\t\t\t<div class="card-text mb-4">${t.name}</div>\n\t\t\t\t\t\t\t\t\t<div class="btn-group">\n\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-outline-secondary">View</button>\n\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-outline-secondary edit">Edit</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div  name = "delete-img" class = "btn btn-danger"  title = "Удалить данное изображение"> Удалить </div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>`}nameFormat(t){return t?t[0].toUpperCase()+t.substring(1).toLowerCase():"Lohn Doh"}urlFomat(t){return-1===t.indexOf("https://")?`https://${t}`:t}},t,new e)},contacts:()=>{e.initTemplate(s,"contact-view"),console.log("Contacts route is loaded")}};return t.updateRoute=function(){let t=document.location.hash.replace(/^#/,"");t&&!e.isLoggedIn()?e.navigateTo(""):function(t){let e=i[t];e&&e()}(t)},t}({}),utils=function(){"use strict";return class{constructor(){this.sortingConfig={A:t=>(t.sort((t,e)=>t.email>e.email?1:-1),t),Z:t=>(t.sort((t,e)=>t.email<e.email?1:-1),t),Admin:t=>t.filter(t=>"Admin"==t.role),User:t=>t.filter(t=>"User"==t.role),Find:t=>{let e=new RegExp(event.target.value,"i");return t.filter(t=>e.test(t.name))}}}static initTemplate(t,e){var s=document.querySelector(`#${e}`).content.cloneNode(!0);t.innerHTML="",t.appendChild(s)}static showView(t){t.forEach(t=>{t.classList.remove("hide")})}static hideView(t){t.forEach(t=>{t.classList.add("hide")})}static navigateTo(t){window.location.hash="#"+t}static isLoggedIn(){return!0}static activateBtn(t){t.forEach(t=>{t.parentElement.classList.add("active")})}static disactivateBtn(t){t.forEach(t=>{t.parentElement.classList.remove("active")})}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
